name: Build Wheels and Release
on:
  push:
    tags:
      - 'v*'
      - 'buildwheels*'
env:
  CIBW_BUILD_VERBOSITY: 2
  # CIBW_BEFORE_BUILD: pip install cython
  CIBW_TEST_REQUIRES: pytest
  CIBW_TEST_COMMAND: pytest --pyargs pywt


jobs:
  build_linux_37_and_above_wheels:
    name: Build python ${{ matrix.cibw_python }} wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-18.04]
        cibw_python: [ "cp37-*", "cp38-*" ]
        cibw_manylinux: [ manylinux1 ]
        include:
          - os: ubuntu-18.04
            cibw_python: "cp39-*"
            cibw_manylinux: manylinux2010
          - os: ubuntu-18.04
            cibw_python: "cp310-*"
            cibw_manylinux: manylinux2014
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - uses: actions/setup-python@v2
        name: Install Python
        with:
          python-version: '3.9'
      - name: Install cibuildwheel
        run: |
          python -m pip install cibuildwheel
      - name: Build the wheel
        run: |
          python -m cibuildwheel --output-dir dist
        env:
          CIBW_BUILD: ${{ matrix.cibw_python }}
          CIBW_ARCHS_LINUX: x86_64 i686
          CIBW_MANYLINUX_X86_64_IMAGE: ${{ matrix.cibw_manylinux }}
          CIBW_MANYLINUX_I686_IMAGE: ${{ matrix.cibw_manylinux }}
      - uses: actions/upload-artifact@v2
        with:
          name: wheels
          path: ./dist/*.whl

  build_linux_aarch64_wheels:
    name: Build python ${{ matrix.cibw_python }} aarch64 wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-18.04]
        cibw_python: ["cp37-*", "cp38-*", "cp39-*", "cp310-*"]
        cibw_manylinux: [ manylinux2014 ]
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - uses: actions/setup-python@v2
        name: Install Python
        with:
          python-version: '3.9'
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
        with:
          platforms: arm64
      - name: Install cibuildwheel
        run: |
          python -m pip install cibuildwheel
      - name: Build the wheel
        run: |
          python -m cibuildwheel --output-dir dist
        env:
          CIBW_BUILD: ${{ matrix.cibw_python }}
          CIBW_ARCHS_LINUX: aarch64
          CIBW_SKIP: "*-musllinux_*"
          CIBW_MANYLINUX_X86_64_IMAGE: ${{ matrix.cibw_manylinux }}
          CIBW_MANYLINUX_I686_IMAGE: ${{ matrix.cibw_manylinux }}
      - uses: actions/upload-artifact@v2
        with:
          name: wheels
          path: ./dist/*.whl

  build_macos_wheels:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [macos-latest]
    env:
      MACOSX_DEPLOYMENT_TARGET: "10.13"
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - uses: actions/setup-python@v2
        name: Install Python
        with:
          python-version: '3.9'

      - name: Install cibuildwheel
        run: |
          python -m pip install cibuildwheel
      - name: Build wheels for CPython (MacOS)
        run: |
          python -m cibuildwheel --output-dir dist
        env:
          CIBW_BUILD: "cp3?-* cp310-*"
          CIBW_SKIP: "cp36-*"
          CIBW_ARCHS_MACOS: x86_64 arm64 universal2
          CIBW_MANYLINUX_X86_64_IMAGE: manylinux1
          CIBW_MANYLINUX_I686_IMAGE: manylinux1
          CC: /usr/bin/clang
          CXX: /usr/bin/clang++
          # CPPFLAGS: "-Xpreprocessor -fopenmp"
          # CFLAGS: "-Wno-implicit-function-declaration -I/usr/local/opt/libomp/include"
          # CXXFLAGS: "-I/usr/local/opt/libomp/include"
          # LDFLAGS: "-Wl,-rpath,/usr/local/opt/libomp/lib -L/usr/local/opt/libomp/lib -lomp"

      - uses: actions/upload-artifact@v2
        with:
          name: wheels
          path: ./dist/*.whl

  build_windows_wheels:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest]

    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - uses: actions/setup-python@v2
        name: Install Python
        with:
          python-version: '3.9'

      - name: Install cibuildwheel
        run: |
          python -m pip install cibuildwheel
      - name: Build Windows wheels for CPython
        run: |
          python -m cibuildwheel --output-dir dist
        env:
          CIBW_BUILD: "cp3?-* cp310-*"
          CIBW_SKIP: "cp36-*"
          CIBW_MANYLINUX_X86_64_IMAGE: manylinux1
          CIBW_MANYLINUX_I686_IMAGE: manylinux1

      - uses: actions/upload-artifact@v2
        with:
          name: wheels
          path: ./dist/*.whl


  deploy:
    name: Release
    needs: [build_linux_37_and_above_wheels, build_linux_aarch64_wheels, build_macos_wheels, build_windows_wheels]
    if: github.repository_owner == 'PyWavelets' && startsWith(github.ref, 'refs/tags/v') && always()
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - uses: actions/setup-python@v2
        name: Install Python
        with:
          python-version: '3.9'
      
      - name: Install Twine
        run: |
          python -m pip install --upgrade pip
          pip install twine
          pip install "cython<3" numpy
      
      - uses: actions/download-artifact@v2
        id: download
        with:
          name: wheels
          path: ./dist
    
      - name: Publish the source distribution on PyPI
        run: |
          PYWT_VERSION=$(git describe --tags)
          python setup.py sdist
          ls -la ${{ github.workspace }}/dist
          # We prefer to release wheels before source because otherwise there is a
          # small window during which users who pip install pywt will require compilation.
          twine upload ${{ github.workspace }}/dist/*.whl
          twine upload ${{ github.workspace }}/dist/pywt-${PYWT_VERSION:1}.tar.gz
        env:
          TWINE_USERNAME: ${{ secrets.TWINE_USERNAME }}
          TWINE_PASSWORD: ${{ secrets.TWINE_PASSWORD }}
              
      - name: Github release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_REPOSITORY: ${{ github.repository }}
